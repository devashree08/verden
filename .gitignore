using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;

namespace Maturity.Portal.Authorization;

/// Creates a policy on-the-fly that requires portal:policy == <policyName>
/// if the policy wasn't explicitly registered.
public sealed class DynamicPolicyProvider(IAuthorizationPolicyProvider fallback)
    : IAuthorizationPolicyProvider
{
    private readonly IAuthorizationPolicyProvider _fallback = fallback;

    public Task<AuthorizationPolicy?> GetDefaultPolicyAsync()
        => _fallback.GetDefaultPolicyAsync();

    public Task<AuthorizationPolicy?> GetFallbackPolicyAsync()
        => _fallback.GetFallbackPolicyAsync();

    public async Task<AuthorizationPolicy?> GetPolicyAsync(string policyName)
    {
        var existing = await _fallback.GetPolicyAsync(policyName);
        if (existing is not null) return existing;

        var p = new AuthorizationPolicyBuilder()
            .RequireAuthenticatedUser()
            .RequireClaim(PortalClaimTypes.Policy, policyName)
            .Build();

        return p;
    }
}
