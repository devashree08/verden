from __future__ import annotations
from dataclasses import dataclass
from typing import Protocol, Sequence, Mapping, Any

@dataclass(frozen=True, slots=True)
class BoundCall:
    """A normalized call to a named data method (proc/TVF) with safe params."""
    name: str                    # e.g., "dbo.SPGetAllAppsValueByEID"
    params: Mapping[str, Any]    # {"EID": "...", "VAST": "...", ...}
    columns: Sequence[str]       # projection (resolved list; "*" already expanded)
    row_limit: int               # enforced by backend (<= configured max)

class DataBackend(Protocol):
    def describe(self, name: str) -> list[dict]:
        """Return columns for `name` as dicts: {"name","sql_type","nullable"}."""

    def execute(self, call: BoundCall) -> list[dict]:
        """Return rows projected to `call.columns`, limited to `row_limit`."""
