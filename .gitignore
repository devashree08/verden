from __future__ import annotations
from pathlib import Path
from typing import Any, Dict, List

from fastmcp import Context
from ruamel.yaml import YAML
from framework.core.registry import mcp

_FIELDS_DIR = Path(__file__).resolve().parent / "fields"

_TOOL_TO_FILE = {
    "get_all_apps_value_by_user": _FIELDS_DIR / "allapps_value.yaml",
    "get_all_apps_summary_by_user": _FIELDS_DIR / "allapps_summary.yaml",
    "get_vast_general_by_user": _FIELDS_DIR / "vast_general.yaml",
}

def _load_yaml(path: Path) -> Dict[str, Any]:
    if not path.exists():
        raise FileNotFoundError(f"Field dictionary not found: {path.name}")
    yaml = YAML(typ="safe")
    with path.open("r", encoding="utf-8") as f:
        return yaml.load(f) or {}

@mcp.resource("fields://{tool_name}")
async def describe_fields(tool_name: str, ctx: Context) -> Dict[str, Any]:
    path = _TOOL_TO_FILE.get(tool_name)
    if path is None:
        return {
            "error": "unknown_tool",
            "message": f"Unsupported tool name '{tool_name}'.",
            "supported": list(_TOOL_TO_FILE.keys()),
        }
    data = _load_yaml(path)
    data.setdefault("_meta", {})
    data["_meta"]["served_by"] = "fields-resource"
    data["_meta"]["tool_name"] = tool_name
    return data

# --- Convenience: list valid names (shows up under normal Resources) ---
@mcp.resource("fields://_list")
async def list_field_dicts(ctx: Context) -> Dict[str, List[str]]:
    return {"tools": list(_TOOL_TO_FILE.keys())}

# --- Convenience: non-templated aliases (show up directly in Resources) ---
@mcp.resource("fields://get_all_apps_value_by_user")
async def fields_value_alias(ctx: Context) -> Dict[str, Any]:
    return await describe_fields("get_all_apps_value_by_user", ctx)

@mcp.resource("fields://get_all_apps_summary_by_user")
async def fields_summary_alias(ctx: Context) -> Dict[str, Any]:
    return await describe_fields("get_all_apps_summary_by_user", ctx)

@mcp.resource("fields://get_vast_general_by_user")
async def fields_general_alias(ctx: Context) -> Dict[str, Any]:
    return await describe_fields("get_vast_general_by_user", ctx)

