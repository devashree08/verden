def _series_is_all_dates(s: pd.Series) -> bool:
    s = s.dropna()
    if s.empty:
        return True  # allow empty column to be typed as DATE
    return all(isinstance(v, date) and not isinstance(v, datetime) for v in s)

def _series_is_all_datetimes(s: pd.Series) -> bool:
    s = s.dropna()
    if s.empty:
        return False
    return all(isinstance(v, datetime) for v in s)

def infer_bq_schema(df: pd.DataFrame, report_month_col: str = "ReportMonth") -> List[bigquery.SchemaField]:
    """
    Map pandas dtypes to BigQuery types (explicit beats autodetect).
    - ints -> INT64
    - floats -> FLOAT64
    - bools -> BOOL
    - datetime64[ns] -> DATETIME
    - object containing datetime.date -> DATE
    - object containing datetime.datetime -> DATETIME
    - everything else -> STRING
    Also: if column name equals report_month_col, force DATE.
    """
    fields: List[bigquery.SchemaField] = []
    for name in df.columns:
        s = df[name]
        kind = "STRING"

        # Hard rule: ReportMonth should be DATE
        if name == report_month_col:
            kind = "DATE"
        else:
            dt = s.dtype
            if pd.api.types.is_integer_dtype(dt):
                kind = "INT64"
            elif pd.api.types.is_float_dtype(dt):
                kind = "FLOAT64"
            elif pd.api.types.is_bool_dtype(dt):
                kind = "BOOL"
            elif pd.api.types.is_datetime64_any_dtype(dt):
                kind = "DATETIME"
            elif pd.api.types.is_object_dtype(dt):
                if _series_is_all_dates(s):
                    kind = "DATE"
                elif _series_is_all_datetimes(s):
                    kind = "DATETIME"
                else:
                    kind = "STRING"

        fields.append(bigquery.SchemaField(name, kind))
    return fields
