import * as React from 'react';
import { Paper, Stack, Chip, Tooltip, Typography } from '@mui/material';
import { statsChipSx } from '../../utils/chipStyles';

export default function AttributeStatsBar({ rows = [] }) {
  const { ml3, ml4, total } = React.useMemo(() => {
    let m3 = 0, m4 = 0;
    for (const r of rows) {
      const isCustom = !!(r.customAttributeDefinition || r.customAttributeNum != null);
      const isBaselineKept = !isCustom && (r.selectionStatus || '') === 'Keep';
      const ml = Number(r.maturityLevel);
      if (ml === 3 && (isCustom || isBaselineKept)) m3++;
      if (ml === 4 && (isCustom || isBaselineKept)) m4++;
    }
    return { ml3: m3, ml4: m4, total: m3 + m4 };
  }, [rows]);

  if (ml3 === 0 && ml4 === 0) return null;

  return (
    <Paper variant="outlined" sx={{ p: 1, borderRadius: 2, mb: 1 }}>
      <Stack direction="row" spacing={1} alignItems="center" flexWrap="wrap" useFlexGap>
        <Typography variant="overline" sx={{ color: 'text.secondary', mr: 0.5 }}>
          Attribute Stats
        </Typography>

        <Tooltip title="ML3 total = kept baseline ML3 + custom ML3">
          <Chip size="small" label={`ML3: ${ml3}`} sx={(t) => statsChipSx(t, 'ml3')} />
        </Tooltip>

        <Tooltip title="ML4 total = kept baseline ML4 + custom ML4">
          <Chip size="small" label={`ML4: ${ml4}`} sx={(t) => statsChipSx(t, 'ml4')} />
        </Tooltip>

        <Tooltip title="Total = ML3 total + ML4 total">
          <Chip size="small" label={`Total: ${total}`} sx={(t) => statsChipSx(t, 'total')} />
        </Tooltip>
      </Stack>
    </Paper>
  );
}



 import { alpha } from '@mui/material/styles';

 /** Meet | Partially Meet | Does Not Meet */
 export function attestationChipSx(theme, value) {
   switch (value) {
     case 'Meet':           return { bgcolor: theme.palette.success.main,   color: theme.palette.common.white };
     case 'Partially Meet': return { bgcolor: theme.palette.warning.main,   color: theme.palette.common.black };
     case 'Does Not Meet':  return { bgcolor: theme.palette.error.main,     color: theme.palette.common.white };
     default:               return { bgcolor: theme.palette.grey[300],      color: theme.palette.text.primary };
   }
 }

 /** Keep | Remove; default to "light" appearance suitable for Select renderValue */
 export function statusChipSx(theme, value, { variant = 'light' } = {}) {
   const { success, error, grey, text, common } = theme.palette;

   if (variant === 'light') {
     if (value === 'Keep')   return { bgcolor: success.light, color: success.dark, borderColor: alpha(success.main, 0.4) };
     if (value === 'Remove') return { bgcolor: error.light,   color: error.dark,   borderColor: alpha(error.main,   0.4) };
     return { bgcolor: grey[200], color: text.primary, borderColor: grey[300] };
   }

   // "deep" filled style if you ever need it
   if (value === 'Keep')   return { bgcolor: success.main, color: common.white };
   if (value === 'Remove') return { bgcolor: error.main,   color: common.white };
   return { bgcolor: grey[300], color: text.primary };
 }
+
+/** Stats chips for the AttributeStatsBar (ML3, ML4, Total) */
+export function statsChipSx(theme, kind) {
+  switch (kind) {
+    case 'ml3':   return { bgcolor: theme.palette.primary.light,  color: theme.palette.primary.contrastText, fontWeight: 700 };
+    case 'ml4':   return { bgcolor: theme.palette.warning.main,   color: theme.palette.common.white,         fontWeight: 700 };
+    case 'total': return { bgcolor: theme.palette.success.main,   color: theme.palette.common.white,         fontWeight: 800 };
+    default:      return { bgcolor: theme.palette.grey[300],      color: theme.palette.text.primary };
+  }
+}
