// src/features/attributeMapping/components/molecules/AttributeFilterBar.jsx

import React from 'react';
import { Box } from '@mui/material';
import { FilterBar } from '../../../../ui/patterns/FilterBar';
import MultiSelectSearch from '../../../../ui/core/MultiSelectSearch';
import Switch from '../../../../ui/core/Switch';
import { fetchAttributeFilterLookups } from '../../api/attributeApi';
import { ensureSelected, MATURITY_OPTIONS } from '../../utils/filters';

export default function AttributeFilterBar({ value, onChange, onExport }) {
  const [opts, setOpts] = React.useState({
    functions: [], categories: [], subcategories: [], owners: [], custodians: []
  });

  // ---- self-excluded, cross-filtered lookups (debounced + race-guarded) ----
  const reqSeq = React.useRef(0);

  React.useEffect(() => {
    const mySeq = ++reqSeq.current;
    const debounce = setTimeout(async () => {
      // helper: omit one facet while applying the rest
      const others = (omit) => ({
        functionIds:    omit === 'functions'     ? undefined : value.functionIds,
        categoryIds:    omit === 'categories'    ? undefined : value.categoryIds,
        subcatIds:      omit === 'subcategories' ? undefined : value.subcatIds,
        ownerNames:     omit === 'owners'        ? undefined : value.ownerNames,
        custodianNames: omit === 'custodians'    ? undefined : value.custodianNames,
      });

      try {
        const [
          fns, cats, subs, owns, custs,
        ] = await Promise.all([
          fetchAttributeFilterLookups(others('functions')),
          fetchAttributeFilterLookups(others('categories')),
          fetchAttributeFilterLookups(others('subcategories')),
          fetchAttributeFilterLookups(others('owners')),
          fetchAttributeFilterLookups(others('custodians')),
        ]);

        // if a newer request started, drop these results
        if (mySeq !== reqSeq.current) return;

        setOpts({
          functions:     (fns.functions     || []).map(x => ({ value: x.functionID,   label: x.functionName })),
          categories:    (cats.categories   || []).map(x => ({ value: x.categoryID,   label: x.categoryName })),
          subcategories: (subs.subcategories|| []).map(x => ({ value: x.subcategoryID, label: x.subcategoryName })),
          owners:        (owns.owners       || []).map(x => ({ value: x.fullName,     label: x.fullName })),
          custodians:    (custs.custodians  || []).map(x => ({ value: x.fullName,     label: x.fullName })),
        });
      } catch {
        // swallow; keep previous options so UI stays usable
      }
    }, 250); // debounce a touch for snappier UX

    return () => clearTimeout(debounce);
  }, [
    value.functionIds,
    value.categoryIds,
    value.subcatIds,
    value.ownerNames,
    value.custodianNames,
  ]);

  const filtersLayout = (
    <Box
      sx={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',
        gap: 2,
        alignItems: 'center',
      }}
    >
      <MultiSelectSearch
        label="Functions"
        value={value.functionIds}
        options={ensureSelected(opts.functions, value.functionIds)}
        onChange={(v) => onChange({ ...value, functionIds: v })}
      />
      <MultiSelectSearch
        label="Categories"
        value={value.categoryIds}
        options={ensureSelected(opts.categories, value.categoryIds)}
        onChange={(v) => onChange({ ...value, categoryIds: v })}
      />
      <MultiSelectSearch
        label="Subcategories"
        value={value.subcatIds}
        options={ensureSelected(opts.subcategories, value.subcatIds)}
        onChange={(v) => onChange({ ...value, subcatIds: v })}
      />
      <MultiSelectSearch
        label="Owners"
        value={value.ownerNames}
        options={ensureSelected(opts.owners, value.ownerNames)}
        onChange={(v) => onChange({ ...value, ownerNames: v })}
      />
      <MultiSelectSearch
        label="Custodians"
        value={value.custodianNames}
        options={ensureSelected(opts.custodians, value.custodianNames)}
        onChange={(v) => onChange({ ...value, custodianNames: v })}
      />
      <MultiSelectSearch
        label="Maturity"
        value={value.maturity}
        options={ensureSelected(MATURITY_OPTIONS, value.maturity)}
        onChange={(v) => onChange({ ...value, maturity: v })}
      />
      <Switch
        label="Final view (hide Removed)"
        checked={!!value.finalOnly}
        onChange={(checked) => onChange({ ...value, finalOnly: checked })}
      />
    </Box>
  );

  return (
    <FilterBar
      filtersLeft={filtersLayout}
      searchValue={value.search}
      onSearchChange={(s) => onChange({ ...value, search: s })}
      onExport={onExport}
      exportLabel="Export Excel"
    />
  );
}
