def get_proc_parameters(pool: ODBCConnectionPool, schema: str, proc: str) -> List[Dict[str, Any]]:
    """
    Return parameter metadata for a stored proc (input + output).
    Fields: ordinal, name, is_output, sql_type, max_length, precision, scale, has_default
    Robust 'has_default' detection:
      - uses sys.parameters.has_default_value
      - PLUS regex parse of OBJECT_DEFINITION to catch '@param = NULL' (or any '@param = <const>')
    """
    full_name = f"[{schema}].[{proc}]"
    cnxn = pool.get()
    try:
        cur = cnxn.cursor()
        # 1) Pull catalog metadata
        cur.execute("""
            SELECT p.parameter_id AS ordinal,
                   REPLACE(p.name,'@','') AS name,
                   p.is_output,
                   t.name AS sql_type,
                   p.max_length, p.precision, p.scale,
                   p.has_default_value
            FROM sys.parameters p
            JOIN sys.types t ON p.user_type_id = t.user_type_id
            WHERE p.object_id = OBJECT_ID(?)
            ORDER BY p.parameter_id;
        """, (full_name,))
        rows = cur.fetchall()

        # 2) Get the T-SQL definition to detect '@param = ...' explicitly
        cur.execute("SELECT OBJECT_DEFINITION(OBJECT_ID(?))", (full_name,))
        row = cur.fetchone()
        definition = row[0] or "" if row else ""
        # normalize for robust matching
        def_norm = definition.lower()

        out: List[Dict[str, Any]] = []
        for r in rows:
            name_noat = r[1]
            has_def = bool(r[7])

            # fallback: consider optional if we see '@param =' in the proc header
            # simple regex-like check without importing re here
            needle = f"@{name_noat.lower()}"
            # find only in the parameter declaration section (before the first AS)
            head = def_norm.split("\nas", 1)[0] if "\nas" in def_norm else def_norm
            # look for patterns like '@param = null' or '@param= default'
            optional_by_code = False
            idx = head.find(needle)
            if idx != -1:
                # slice a small window after the param name to find '=' quickly
                window = head[idx: idx + 200]
                if "=" in window:
                    optional_by_code = True

            out.append({
                "ordinal": r[0],
                "name": name_noat,
                "is_output": bool(r[2]),
                "sql_type": r[3].lower(),
                "max_length": r[4],
                "precision": r[5],
                "scale": r[6],
                # final has_default: catalog OR seen '@param = ...' in the header
                "has_default": has_def or optional_by_code,
            })
        return out
    finally:
        pool.put(cnxn)
