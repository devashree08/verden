CREATE OR ALTER PROCEDURE dbo.sp_AttributeArtifact_Mutate
  @Action              NVARCHAR(16),          -- 'Link' | 'Unlink' | 'Update'
  @OrgID               INT,
  @CSF2SubcategoryID   INT,
  @MaturityLevel       INT,
  @CSF1SubcategoryID   INT = NULL,            -- baseline only; NULL for custom
  @AttributeNum        INT = NULL,            -- baseline only; NULL for custom
  @CustomAttributeNum  INT = NULL,            -- custom only; NULL for baseline

  @Url                 NVARCHAR(2048) = NULL, -- Link: required; Unlink: optional when @ArtifactLinkID used; Update: optional
  @Title               NVARCHAR(300) = NULL,  -- Link/Update: optional
  @Actor               NVARCHAR(200) = NULL,  -- Link: CreatedBy
  @ArtifactLinkID      INT = NULL             -- Unlink convenience; Update: REQUIRED
AS
BEGIN
  SET NOCOUNT ON;
  SET XACT_ABORT ON;

  IF @Action NOT IN ('Link','Unlink','Update')
  BEGIN
    RAISERROR('Invalid @Action. Use Link | Unlink | Update.', 16, 1);
    RETURN;
  END

  /* ========================== LINK ========================== */
  IF @Action = 'Link'
  BEGIN
    SET @Url = LTRIM(RTRIM(@Url));
    IF (@Url IS NULL OR @Url = '')
    BEGIN
      RAISERROR('Url is required for Link.', 16, 1);
      RETURN;
    END

    BEGIN TRY
      BEGIN TRAN;

      -- 1) Reactivate if identical inactive row exists
      UPDATE TOP (1) dbo.AttributeArtifact
         SET IsActive = 1,
             Title = COALESCE(NULLIF(@Title,''), Title),
             UpdatedAt = SYSUTCDATETIME()
       WHERE OrgID             = @OrgID
         AND CSF2SubcategoryID = @CSF2SubcategoryID
         AND MaturityLevel     = @MaturityLevel
         AND (
               (@CustomAttributeNum IS NULL AND CustomAttributeNum IS NULL
                AND CSF1SubcategoryID = @CSF1SubcategoryID
                AND AttributeNum      = @AttributeNum)
            OR (@CustomAttributeNum IS NOT NULL AND CustomAttributeNum = @CustomAttributeNum)
             )
         AND Url = @Url
         AND IsActive = 0;

      IF @@ROWCOUNT = 0
      BEGIN
        -- 2) Insert new (unique filtered index enforces "no dup active per attribute")
        BEGIN TRY
          INSERT dbo.AttributeArtifact
            (OrgID, CSF2SubcategoryID, MaturityLevel,
             CSF1SubcategoryID, AttributeNum, CustomAttributeNum,
             Url, Title, IsActive, CreatedBy)
          VALUES
            (@OrgID, @CSF2SubcategoryID, @MaturityLevel,
             @CSF1SubcategoryID, @AttributeNum, @CustomAttributeNum,
             @Url, NULLIF(@Title,''), 1, @Actor);
        END TRY
        BEGIN CATCH
          -- If a concurrent INSERT won the race, swallow dup key and continue
          IF ERROR_NUMBER() NOT IN (2601, 2627) THROW;
        END CATCH
      END

      COMMIT;
    END TRY
    BEGIN CATCH
      IF @@TRANCOUNT > 0 ROLLBACK;
      THROW;
    END CATCH

    -- Return the effective row (post-commit)
    SELECT TOP (1)
      ArtifactLinkID, OrgID, CSF2SubcategoryID, MaturityLevel,
      CSF1SubcategoryID, AttributeNum, CustomAttributeNum,
      Url, Title, IsActive, CreatedBy, CreatedAt, UpdatedAt
    FROM dbo.AttributeArtifact
    WHERE OrgID             = @OrgID
      AND CSF2SubcategoryID = @CSF2SubcategoryID
      AND MaturityLevel     = @MaturityLevel
      AND (
            (@CustomAttributeNum IS NULL AND CustomAttributeNum IS NULL
             AND CSF1SubcategoryID = @CSF1SubcategoryID
             AND AttributeNum      = @AttributeNum)
         OR (@CustomAttributeNum IS NOT NULL AND CustomAttributeNum = @CustomAttributeNum)
          )
      AND Url = @Url
    ORDER BY ArtifactLinkID DESC;

    RETURN;
  END

  /* ========================== UPDATE (Title/Url for ONE link row) ========================== */
  IF @Action = 'Update'
  BEGIN
    IF @ArtifactLinkID IS NULL
    BEGIN
      RAISERROR('ArtifactLinkID is required for Update.', 16, 1);
      RETURN;
    END

    DECLARE
      @OrgID_                 INT,
      @CSF2SubcategoryID_     INT,
      @MaturityLevel_         INT,
      @CSF1SubcategoryID_     INT,
      @AttributeNum_          INT,
      @CustomAttributeNum_    INT,
      @PrevUrl                NVARCHAR(2048);

    SELECT
      @OrgID_              = OrgID,
      @CSF2SubcategoryID_  = CSF2SubcategoryID,
      @MaturityLevel_      = MaturityLevel,
      @CSF1SubcategoryID_  = CSF1SubcategoryID,
      @AttributeNum_       = AttributeNum,
      @CustomAttributeNum_ = CustomAttributeNum,
      @PrevUrl             = Url
    FROM dbo.AttributeArtifact
    WHERE ArtifactLinkID = @ArtifactLinkID
      AND IsActive = 1;

    IF @OrgID_ IS NULL
    BEGIN
      RAISERROR('Active artifact link not found.', 16, 1);
      RETURN;
    END

    -- Normalize/validate URL if provided
    IF @Url IS NOT NULL
    BEGIN
      SET @Url = LTRIM(RTRIM(@Url));
      IF (@Url = '')
      BEGIN
        RAISERROR('Url cannot be blank.', 16, 1);
        RETURN;
      END
      IF LEFT(LOWER(@Url), 8) <> 'https://'
      BEGIN
        RAISERROR('URL must start with https://', 16, 1);
        RETURN;
      END
    END

    BEGIN TRY
      BEGIN TRAN;

      -- Update this single row. Filtered unique index will reject dup URL for the same attribute.
      UPDATE dbo.AttributeArtifact
         SET Url       = COALESCE(@Url, Url),
             Title     = COALESCE(NULLIF(@Title,''), Title),
             UpdatedAt = SYSUTCDATETIME()
       WHERE ArtifactLinkID = @ArtifactLinkID
         AND IsActive = 1;

      COMMIT;
    END TRY
    BEGIN CATCH
      IF @@TRANCOUNT > 0 ROLLBACK;
      IF ERROR_NUMBER() IN (2601,2627)
        RAISERROR('This URL is already attached to this attribute.', 16, 1);
      ELSE
        THROW;
    END CATCH

    SELECT *
    FROM dbo.AttributeArtifact
    WHERE ArtifactLinkID = @ArtifactLinkID;

    RETURN;
  END

  /* ========================== UNLINK ========================== */
  IF @Action = 'Unlink'
  BEGIN
    BEGIN TRY
      BEGIN TRAN;

      IF @ArtifactLinkID IS NOT NULL
      BEGIN
        UPDATE dbo.AttributeArtifact
           SET IsActive = 0,
               UpdatedAt = SYSUTCDATETIME()
         WHERE ArtifactLinkID = @ArtifactLinkID
           AND IsActive = 1;
      END
      ELSE
      BEGIN
        SET @Url = LTRIM(RTRIM(@Url));
        IF (@Url IS NULL OR @Url = '')
        BEGIN
          ROLLBACK;
          RAISERROR('Url (or ArtifactLinkID) is required for Unlink.', 16, 1);
          RETURN;
        END

        UPDATE dbo.AttributeArtifact
           SET IsActive = 0,
               UpdatedAt = SYSUTCDATETIME()
         WHERE OrgID             = @OrgID
           AND CSF2SubcategoryID = @CSF2SubcategoryID
           AND MaturityLevel     = @MaturityLevel
           AND (
                 (@CustomAttributeNum IS NULL AND CustomAttributeNum IS NULL
                  AND CSF1SubcategoryID = @CSF1SubcategoryID
                  AND AttributeNum      = @AttributeNum)
              OR (@CustomAttributeNum IS NOT NULL AND CustomAttributeNum = @CustomAttributeNum)
               )
           AND Url      = @Url
           AND IsActive = 1;
      END

      COMMIT;
    END TRY
    BEGIN CATCH
      IF @@TRANCOUNT > 0 ROLLBACK;
      THROW;
    END CATCH

    SELECT @@ROWCOUNT AS affected;
    RETURN;
  END
END
GO



import * as React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Tabs, Tab, Box, Stack, Button, TextField, List, ListItem, ListItemText,
  IconButton, Tooltip, Chip, Divider, Typography
} from '@mui/material';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import AddLinkIcon from '@mui/icons-material/AddLink';
import LinkIcon from '@mui/icons-material/Link';
import EditOutlinedIcon from '@mui/icons-material/EditOutlined';
import SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';
import CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';
import DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';
import useToast from '../../../../ui/feedback/useToast';

import {
  listAttributeArtifacts,
  listReusePool,
  linkArtifact,
  unlinkArtifact,
  updateArtifactLink,        // <-- add this in artifactsApi.js (shown below)
} from '../../api/artifactsApi';

// simple https guard
const isSecureUrl = (u) => typeof u === 'string' && u.trim().toLowerCase().startsWith('https://');

export default function ArtifactLinksModal({ open, onClose, identity }) {
  const { success, error, info } = useToast();
  const [tab, setTab] = React.useState(0); // 0=Current, 1=Add New, 2=Reuse Existing
  const [loading, setLoading] = React.useState(false);

  // lists
  const [items, setItems] = React.useState([]);  // current links (this attribute)
  const [pool, setPool] = React.useState([]);    // reuse pool (distinct by URL within org+sub)

  // add-new fields
  const [newUrl, setNewUrl] = React.useState('');
  const [newTitle, setNewTitle] = React.useState('');

  // inline edit fields (Current tab)
  const [editRowId, setEditRowId] = React.useState(null);
  const [editUrl, setEditUrl] = React.useState('');
  const [editTitle, setEditTitle] = React.useState('');

  const cancelEdit = () => { setEditRowId(null); setEditUrl(''); setEditTitle(''); };

  const reloadCurrent = React.useCallback(async () => {
    if (!identity?.orgID) return;
    setLoading(true);
    try {
      const data = await listAttributeArtifacts(identity);
      setItems(data || []);
    } catch {
      error('Failed to load artifacts');
    } finally {
      setLoading(false);
    }
  }, [identity, error]);

  const loadPool = React.useCallback(async () => {
    if (!identity?.orgID) return;
    setLoading(true);
    try {
      const data = await listReusePool({
        orgID: identity.orgID,
        csf2SubcategoryID: identity.csf2SubcategoryID,
      });
      setPool(data || []);
    } catch {
      error('Failed to load reuse pool');
    } finally {
      setLoading(false);
    }
  }, [identity, error]);

  // OPEN effect: reset once when opening
  const wasOpenRef = React.useRef(false);
  React.useEffect(() => {
    if (open && !wasOpenRef.current) {
      wasOpenRef.current = true;
      setTab(0);
      cancelEdit();
      setNewUrl(''); setNewTitle('');
      reloadCurrent();
    } else if (!open && wasOpenRef.current) {
      wasOpenRef.current = false;
      cancelEdit();
    }
  }, [open, reloadCurrent]);

  // Identity changes while open → refresh current silently (don’t flip tab)
  React.useEffect(() => {
    if (!open) return;
    reloadCurrent();
  }, [
    open,
    identity?.orgID,
    identity?.csf2SubcategoryID,
    identity?.maturityLevel,
    identity?.csf1SubcategoryID,
    identity?.attributeNum,
    identity?.customAttributeNum,
    reloadCurrent
  ]);

  // Lazy load pool when tab=2
  React.useEffect(() => {
    if (open && tab === 2) loadPool();
  }, [open, tab, loadPool]);

  // handlers
  const handleAddNew = async () => {
    if (!isSecureUrl(newUrl)) { info('Please enter a secure https:// URL.'); return; }
    setLoading(true);
    try {
      await linkArtifact({
        ...identity,
        url: newUrl.trim(),
        title: (newTitle || '').trim() || null,
      });
      success('Link added');
      setNewUrl(''); setNewTitle('');
      setTab(0);
      reloadCurrent();
    } catch (e) {
      error(e?.response?.data?.message || 'Failed to add link');
    } finally {
      setLoading(false);
    }
  };

  const handleReuse = async (url, title) => {
    setLoading(true);
    try {
      await linkArtifact({ ...identity, url, title: title || null });
      success('Link reused');
      setTab(0);
      reloadCurrent();
    } catch (e) {
      error(e?.response?.data?.message || 'Failed to reuse link');
    } finally {
      setLoading(false);
    }
  };

  const handleUnlink = async (artifactLinkID) => {
    setLoading(true);
    try {
      await unlinkArtifact({ artifactLinkID });
      success('Unlinked');
      reloadCurrent();
    } catch {
      error('Failed to unlink');
    } finally {
      setLoading(false);
    }
  };

  const startEdit = (row) => {
    setEditRowId(row.artifactLinkID);
    setEditUrl(row.url || '');
    setEditTitle(row.title || '');
  };

  const saveEdit = async () => {
    if (editUrl && !isSecureUrl(editUrl)) { info('URL must start with https://'); return; }
    setLoading(true);
    try {
      await updateArtifactLink({
        artifactLinkID: editRowId,
        url: editUrl || null,
        title: (editTitle || '').trim() || null,
      });
      success('Link updated');
      cancelEdit();
      reloadCurrent();
    } catch (e) {
      const msg = e?.response?.data?.message || '';
      if (/already attached/i.test(msg)) error('This URL is already attached to this attribute.');
      else error(msg || 'Update failed');
    } finally {
      setLoading(false);
    }
  };

  const disabled = !!identity?.disabled;

  return (
    <Dialog open={open} onClose={loading ? undefined : onClose} fullWidth maxWidth="md">
      <DialogTitle>Attribute Artifacts</DialogTitle>
      <DialogContent dividers>
        <Tabs value={tab} onChange={(_, v) => { setTab(v); cancelEdit(); }} sx={{ mb: 2 }}>
          <Tab label="Current" />
          <Tab label="Add New" />
          <Tab label="Reuse Existing" />
        </Tabs>

        {/* Current */}
        {tab === 0 && (
          <List dense disablePadding>
            {items.length === 0 && (
              <Typography variant="body2" color="text.secondary">No artifacts yet.</Typography>
            )}
            {items.map(it => {
              const isEditing = editRowId === it.artifactLinkID;
              return (
                <ListItem
                  key={it.artifactLinkID}
                  secondaryAction={
                    <Stack direction="row" spacing={0.5}>
                      {!isEditing ? (
                        <>
                          <Tooltip title="Open">
                            <IconButton size="small" component="a" href={it.url} target="_blank" rel="noopener noreferrer">
                              <OpenInNewIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          {!disabled && (
                            <>
                              <Tooltip title="Edit">
                                <IconButton size="small" onClick={() => startEdit(it)}>
                                  <EditOutlinedIcon fontSize="small" />
                                </IconButton>
                              </Tooltip>
                              <Tooltip title="Unlink">
                                <IconButton size="small" onClick={() => handleUnlink(it.artifactLinkID)}>
                                  <DeleteOutlineOutlinedIcon fontSize="small" />
                                </IconButton>
                              </Tooltip>
                            </>
                          )}
                        </>
                      ) : (
                        <>
                          <Tooltip title="Save">
                            <span>
                              <IconButton size="small" onClick={saveEdit} disabled={loading || (editUrl && !isSecureUrl(editUrl))}>
                                <SaveOutlinedIcon fontSize="small" />
                              </IconButton>
                            </span>
                          </Tooltip>
                          <Tooltip title="Cancel">
                            <IconButton size="small" onClick={cancelEdit}>
                              <CloseOutlinedIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </>
                      )}
                    </Stack>
                  }
                >
                  {!isEditing ? (
                    <ListItemText
                      primary={
                        <Stack direction="row" spacing={1} alignItems="center" flexWrap="wrap" useFlexGap>
                          <LinkIcon fontSize="small" />
                          <Typography variant="body2" sx={{ fontWeight: 700 }}>{it.title || it.url}</Typography>
                          {it.title && <Chip variant="outlined" size="small" label={it.url} />}
                        </Stack>
                      }
                      secondary={
                        <Typography variant="caption" color="text.secondary">
                          Added {new Date(it.createdAt).toLocaleString()}
                          {it.updatedAt ? ` • Updated ${new Date(it.updatedAt).toLocaleString()}` : ''}
                        </Typography>
                      }
                    />
                  ) : (
                    <Stack spacing={1} sx={{ width: '100%', pr: 6 }}>
                      <TextField
                        size="small"
                        label="Title"
                        value={editTitle}
                        onChange={(e) => setEditTitle(e.target.value)}
                        fullWidth
                        disabled={disabled}
                      />
                      <TextField
                        size="small"
                        label="URL (https://…)"
                        value={editUrl}
                        onChange={(e) => setEditUrl(e.target.value)}
                        fullWidth
                        error={!!editUrl && !isSecureUrl(editUrl)}
                        helperText={!!editUrl && !isSecureUrl(editUrl) ? 'Must start with https://' : ' '}
                        disabled={disabled}
                      />
                    </Stack>
                  )}
                </ListItem>
              );
            })}
          </List>
        )}

        {/* Add New */}
        {tab === 1 && (
          <Box>
            <Stack spacing={1.5}>
              <TextField
                size="small"
                label="Title (optional)"
                value={newTitle}
                onChange={(e) => setNewTitle(e.target.value)}
                fullWidth
                disabled={disabled}
              />
              <TextField
                size="small"
                label="URL (https://…)"
                value={newUrl}
                onChange={(e) => setNewUrl(e.target.value)}
                fullWidth
                error={!!newUrl && !isSecureUrl(newUrl)}
                helperText={!!newUrl && !isSecureUrl(newUrl) ? 'Must start with https://' : ' '}
                disabled={disabled}
              />
              <Button
                variant="contained"
                startIcon={<AddLinkIcon />}
                onClick={handleAddNew}
                disabled={disabled || !isSecureUrl(newUrl) || loading}
              >
                Add Link
              </Button>
            </Stack>
          </Box>
        )}

        {/* Reuse Existing */}
        {tab === 2 && (
          <Box>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              Showing unique URLs within this Org + CSF 2.0 Subcategory.
            </Typography>
            <List dense disablePadding>
              {pool.length === 0 && (
                <Typography variant="body2" color="text.secondary">No reusable links found.</Typography>
              )}
              {pool.map((p, i) => (
                <React.Fragment key={`${p.url}-${i}`}>
                  <ListItem
                    secondaryAction={
                      <Stack direction="row" spacing={0.5}>
                        <Tooltip title="Open">
                          <IconButton size="small" component="a" href={p.url} target="_blank" rel="noopener noreferrer">
                            <OpenInNewIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        {!disabled && (
                          <Tooltip title="Reuse">
                            <IconButton size="small" onClick={() => handleReuse(p.url, p.title)}>
                              <LinkIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        )}
                      </Stack>
                    }
                  >
                    <ListItemText
                      primary={<Typography variant="body2" sx={{ fontWeight: 700 }}>{p.title || p.url}</Typography>}
                      secondary={<Typography variant="caption" color="text.secondary">{p.url}</Typography>}
                    />
                  </ListItem>
                  {i < pool.length - 1 && <Divider component="li" />}
                </React.Fragment>
              ))}
            </List>
          </Box>
        )}
      </DialogContent>

      <DialogActions>
        <Button onClick={onClose} disabled={loading}>Close</Button>
      </DialogActions>
    </Dialog>
  );
}
