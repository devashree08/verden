def infer_bq_schema(df: pd.DataFrame) -> List[bigquery.SchemaField]:
    """
    Simple mapping with NUMERIC support:
      - object series holding Decimal (or numeric-like) -> NUMERIC
      - ints -> INT64
      - floats -> FLOAT64
      - bools -> BOOL
      - datetime64 -> DATETIME
      - else -> STRING
    """
    fields: List[bigquery.SchemaField] = []
    for name, dtype in df.dtypes.items():
        kind = "STRING"
        if pd.api.types.is_integer_dtype(dtype):
            kind = "INT64"
        elif pd.api.types.is_float_dtype(dtype):
            kind = "FLOAT64"
        elif pd.api.types.is_bool_dtype(dtype):
            kind = "BOOL"
        elif pd.api.types.is_datetime64_any_dtype(dtype):
            kind = "DATETIME"
        elif pd.api.types.is_object_dtype(dtype):
            # decide between NUMERIC vs STRING
            s = df[name]
            if _series_all_numeric_like(s):
                kind = "NUMERIC"
            else:
                kind = "STRING"
        fields.append(bigquery.SchemaField(name, kind))
    return fields


# Coerce numeric-like object columns to Decimal so PyArrow can emit NUMERIC cleanly
for col in df.columns:
    if pd.api.types.is_object_dtype(df[col].dtype):
        s = df[col]
        if _series_all_numeric_like(s):
            df[col] = _coerce_series_to_decimal(s)


