from fastmcp.server.dependencies import get_access_token  # add this import at top

class EmailClaimMiddleware(Middleware):
    async def on_request(self, context: MiddlewareContext, call_next):
        # Get the verified access token (or None)
        token = get_access_token()  # correct way in current FastMCP
        if token is None:
            return await context.fastmcp_context.error("Unauthorized: missing or invalid access token", status=401)

        claims = token.claims or {}
        raw_email = (
            claims.get("email")
            or claims.get("upn")
            or claims.get("preferred_username")
        )

        if not raw_email:
            return await context.fastmcp_context.error("Forbidden: email claim missing", status=403)

        context.fastmcp_context.set_state("email", raw_email.strip().lower())
        return await call_next()
