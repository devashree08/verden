"""
Tool: get_vast_general_by_user  -> dbo.SPGetVastGeneralByUser
- General/compliance data for VASTs (includes decommissioned)
- Pydantic validation & normalization for inputs
"""

from __future__ import annotations
from typing import Any, Dict, List, Optional, Union

from fastmcp import Context
from pydantic import BaseModel, field_validator

from framework.core.registry import mcp
from framework.core.config import DB_BACKEND
from framework.schemas.outputs import ROWS_OUTPUT


class _WithPaging(BaseModel):
    limit: int = 1000
    offset: int = 0

    @field_validator("limit")
    @classmethod
    def cap_limit(cls, v: int) -> int:
        return max(1, min(v, 15_000))

    @field_validator("offset")
    @classmethod
    def non_negative_offset(cls, v: int) -> int:
        return max(0, v)


class VastGeneralParams(_WithPaging):
    vast: Optional[Union[str, List[Union[int, str]]]] = None

    @field_validator("vast", mode="before")
    @classmethod
    def normalize_vast(cls, v: Any) -> Optional[str]:
        if v is None:
            return None
        if isinstance(v, str):
            s = v.strip()
            return s or None
        if isinstance(v, (list, tuple)):
            parts: List[str] = []
            for item in v:
                if item is None:
                    continue
                s = str(item).strip()
                if s:
                    parts.append(s)
            return ",".join(parts) or None
        s = str(v).strip()
        return s or None


@mcp.tool(
    name="get_vast_general_by_user",
    description=(
        "Return general/compliance attributes (SOX, PCI, rankings, etc.) "
        "for the caller's accessible VASTs. Includes decommissioned."
    ),
    output_schema=ROWS_OUTPUT,
)
async def get_vast_general_by_user(
    params: VastGeneralParams,
    ctx: Context,
) -> Dict[str, List[Dict[str, Any]]]:
    email = (ctx.get_state("email") or "").lower()

    if DB_BACKEND == "mssql":
        from framework.adapters.mssql import call_sp_vast_general as run_query
        rows = run_query(email=email, vast=params.vast, limit=params.limit, offset=params.offset)
    else:
        from framework.adapters.bigquery import query_vast_general as run_query
        rows = run_query(email=email, vast=params.vast, limit=params.limit, offset=params.offset)

    return {"rows": rows}
