"""
Tool: get_vast_general_by_user

Compliance / general metadata per VAST (includes decommissioned).
No report_month parameter.

Inputs (separate fields): vast, limit, offset
Output: { "rows": [ ... ] }
"""

from __future__ import annotations
from typing import Any, Dict, Annotated

from fastmcp import Context
from pydantic import Field

from framework.core.registry import mcp
from framework.core.config import DB_BACKEND
from framework.schemas.outputs import rows_schema
from framework.adapters import mssql as mssql_adapter
from framework.adapters import bigquery as bq_adapter


def _to_csv_from_list(v: list[str | int] | None) -> str | None:
    if not v:
        return None
    toks = [str(x).strip() for x in v if x not in (None, "", " ")]
    return ",".join(t for t in toks if t) or None


@mcp.tool(
    name="get_vast_general_by_user",
    description="Compliance/general metadata per VAST for the authenticated user. Includes decommissioned VASTs.",
    output_schema=rows_schema,
)
async def get_vast_general_by_user(
    vast: Annotated[list[str | int] | None, Field(description="VAST filter as a list e.g. ['101','202']. Omit for all caller-permitted VASTs (incl. decommissioned).")] = None,
    limit: Annotated[int, Field(ge=1, le=15000, description="Max rows to return (1â€“15000). Default 1000.")] = 1000,
    offset: Annotated[int, Field(ge=0, description="Rows to skip before returning results. Default 0.")] = 0,
    ctx: Context = Context.depends(),
) -> Dict[str, Any]:
    email = (ctx.get_state("email") or "").strip()
    if not email:
        return {"rows": []}

    vast_csv = _to_csv_from_list(vast)

    if DB_BACKEND == "mssql":
        rows = mssql_adapter.run_vast_general_by_user(
            email=email, vast_csv=vast_csv, limit=limit, offset=offset
        )
    else:
        rows = bq_adapter.run_vast_general_by_user(
            email=email, vast_csv=vast_csv, limit=limit, offset=offset
        )
    return {"rows": rows}
