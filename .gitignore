"""
Sample reference PROMPT for developers.

- Shows @mcp.prompt usage
- Useful for giving the agent canned guidance (escalation, style, glossary, etc.)
"""

from __future__ import annotations
from fastmcp import mcp


@mcp.prompt(name="sample_escalation_prompt", description="Simple escalation guidance for testing.")
async def sample_escalation_prompt() -> str:
    """
    Returns:
        A short, plain-text prompt string. Clients can read and use it when composing messages.
    """
    return (
        "If the user asks for actions beyond their access, explain the limitation clearly. "
        "Offer safe alternatives (e.g., contact owner, request access). "
        "Avoid leaking internal identifiers unless necessary for triage."
    )




"""Tool entrypoints (one file per tool)."""

# Side-effect imports so decorator registration happens on module import
from .sample_echo_tool import sample_echo  # noqa: F401

__all__ = ["sample_echo"]




"""Resources (e.g., describe_fields) and static field dictionaries."""

# Side-effect imports so decorator registration happens on module import
from .sample_resource import sample_doc  # noqa: F401

__all__ = ["sample_doc"]


    # 4) (Later) import tools/resources so decorators register with this server
    try:
        # Reference examples (Step 7A)
        import server.tools  # noqa: F401  (triggers sample tool registration)
        import server.resources  # noqa: F401  (triggers sample resource registration)
        import server.prompts  # noqa: F401  (prompts are discoverable too)
    except Exception as exc:  # pragma: no cover
        log.exception("Tool/resource registration failed: %s", exc)
        raise
