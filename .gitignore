"""
BigQuery adapter (fallback path).

- Uses application default credentials (Cloud Run service account).
- Enforces access by deriving caller EID from workers table, then joining to vast map.
- Returns rows as List[Dict[str, Any]].
- Applies LIMIT/OFFSET in SQL to keep transfers small.
"""

from __future__ import annotations
from typing import Any, Dict, List, Optional, Union
from datetime import datetime
from dateutil import parser as dtparse
import logging

from google.cloud import bigquery

from ..core.config import (
    BQ_PROJECT_ID,
    BQ_DATASET,
    BQ_TABLE_ALLAPPS_VALUE,
    BQ_TABLE_ALLAPPS_SUMMARY,
    BQ_TABLE_VAST_GENERAL,
)

log = logging.getLogger(__name__)

# Reference tables in the same dataset (per your export)
_REF_WORKERS = "ref_aaas_workers_outbound"
_REF_EID_VAST = "ref_eid_vast_map"


def _client() -> bigquery.Client:
    # If BQ_PROJECT_ID is empty, the client will use default project from ADC
    return bigquery.Client(project=BQ_PROJECT_ID or None)


def _fq(client: bigquery.Client, table: str) -> str:
    """
    Fully-qualified table name: `project.dataset.table`
    Uses BQ_PROJECT_ID if set; otherwise client.project
    """
    project = BQ_PROJECT_ID or client.project
    return f"`{project}.{BQ_DATASET}.{table}`"


def _normalize_vast_csv(vast: Optional[Union[str, List[Union[int, str]]]]) -> Optional[str]:
    if vast is None:
        return None
    if isinstance(vast, str):
        s = vast.strip()
        return s if s else None
    tokens = []
    for v in vast:
        if v is None:
            continue
        t = str(v).strip()
        if t:
            tokens.append(t)
    csv = ",".join(tokens)
    return csv or None


def _normalize_report_month_literal(report_month: Optional[Union[str, datetime]]) -> Optional[str]:
    """
    Normalize to 'YYYY-MM-01 00:00:00' (matches the DB/BQ export literal).
    Accepts: None | 'YYYY-MM' | 'Month YYYY' | datetime
    """
    if report_month is None:
        return None
    if isinstance(report_month, datetime):
        return report_month.replace(day=1, hour=0, minute=0, second=0, microsecond=0).strftime("%Y-%m-%d %H:%M:%S")
    s = str(report_month).strip()
    if not s:
        return None
    try:
        if len(s) == 7 and s[4] == "-":
            year = int(s[0:4])
            month = int(s[5:7])
            dt = datetime(year, month, 1)
        else:
            dt = dtparse.parse(s)
            dt = dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return None


def _bq_type(v: Any) -> str:
    if isinstance(v, bool):
        return "BOOL"
    if isinstance(v, int):
        return "INT64"
    # strings or None â†’ STRING
    return "STRING"


def _run_query(sql: str, params: Dict[str, Any], timeout: int = 90) -> List[Dict[str, Any]]:
    client = _client()
    job_config = bigquery.QueryJobConfig(
        query_parameters=[
            bigquery.ScalarQueryParameter(k, _bq_type(v), v) for k, v in params.items()
        ]
    )
    query_job = client.query(sql, job_config=job_config)
    result = query_job.result(timeout=timeout)  # type: ignore[arg-type]
    rows: List[Dict[str, Any]] = []
    for row in result:
        rows.append(dict(row.items()))
    return rows


def _email_to_eid_cte(client: bigquery.Client) -> str:
    workers = _fq(client, _REF_WORKERS)
    return f"""
WITH email_to_eid AS (
  SELECT CAST(MIN(w.identityeid) AS STRING) AS eid
  FROM {workers} AS w
  WHERE LOWER(TRIM(w.emailaddressinternal)) = LOWER(TRIM(@email))
),
allowed_vasts AS (
  SELECT DISTINCT ev.vast_id
  FROM {_fq(client, _REF_EID_VAST)} AS ev
  JOIN email_to_eid e ON ev.eid = e.eid
)
"""


def _vast_filter_sql(column_name: str) -> str:
    # SAFE_CAST guards against invalid inputs in @vast_csv
    return f"""
AND (
  @vast_csv IS NULL
  OR {column_name} IN UNNEST(
      ARRAY(
        SELECT SAFE_CAST(TRIM(x) AS INT64)
        FROM UNNEST(SPLIT(@vast_csv, ',')) AS x
        WHERE TRIM(x) != '' AND SAFE_CAST(TRIM(x) AS INT64) IS NOT NULL
      )
    )
)
AND {column_name} IN (SELECT vast_id FROM allowed_vasts)
"""


def _sanitize_paging(limit: int, offset: int) -> tuple[int, int]:
    if limit is None or limit <= 0:
        limit = 1
    if offset is None or offset < 0:
        offset = 0
    return int(limit), int(offset)


def query_allapps_value(
    *,
    email: str,
    vast: Optional[Union[str, List[Union[int, str]]]] = None,
    limit: int = 1000,
    offset: int = 0,
) -> List[Dict[str, Any]]:
    """
    Fallback for SPGetAllAppsValueByUser (current month snapshot).
    """
    client = _client()
    vast_csv = _normalize_vast_csv(vast)
    limit, offset = _sanitize_paging(limit, offset)

    sql = f"""
{_email_to_eid_cte(client)}
SELECT *
FROM {_fq(client, BQ_TABLE_ALLAPPS_VALUE)}
WHERE TRUE
{_vast_filter_sql("VastID")}
ORDER BY VastID
LIMIT @limit OFFSET @offset
"""
    params = {"email": email, "vast_csv": vast_csv, "limit": limit, "offset": offset}
    return _run_query(sql, params)


def query_allapps_summary(
    *,
    email: str,
    vast: Optional[Union[str, List[Union[int, str]]]] = None,
    report_month: Optional[Union[str, datetime]] = None,
    limit: int = 1000,
    offset: int = 0,
) -> List[Dict[str, Any]]:
    """
    Fallback for SPGetAllAppsSummaryByUser (historical monthly snapshots).
    If @report_month is provided, filter to 'YYYY-MM-01 00:00:00'.
    """
    client = _client()
    vast_csv = _normalize_vast_csv(vast)
    report_literal = _normalize_report_month_literal(report_month)
    limit, offset = _sanitize_paging(limit, offset)

    filter_rm = "AND ReportMonth = @report_month" if report_literal else ""

    sql = f"""
{_email_to_eid_cte(client)}
SELECT *
FROM {_fq(client, BQ_TABLE_ALLAPPS_SUMMARY)}
WHERE TRUE
{_vast_filter_sql("VastID")}
{filter_rm}
ORDER BY ReportMonth DESC, VastID
LIMIT @limit OFFSET @offset
"""
    params = {
        "email": email,
        "vast_csv": vast_csv,
        "report_month": report_literal,
        "limit": limit,
        "offset": offset,
    }
    return _run_query(sql, params)


def query_vast_general(
    *,
    email: str,
    vast: Optional[Union[str, List[Union[int, str]]]] = None,
    limit: int = 1000,
    offset: int = 0,
) -> List[Dict[str, Any]]:
    """
    Fallback for SPGetVastGeneralByUser (compliance/general; includes decommissioned).
    """
    client = _client()
    vast_csv = _normalize_vast_csv(vast)
    limit, offset = _sanitize_paging(limit, offset)

    sql = f"""
{_email_to_eid_cte(client)}
SELECT *
FROM {_fq(client, BQ_TABLE_VAST_GENERAL)}
WHERE TRUE
{_vast_filter_sql("VastID")}
ORDER BY VastID
LIMIT @limit OFFSET @offset
"""
    params = {"email": email, "vast_csv": vast_csv, "limit": limit, "offset": offset}
    return _run_query(sql, params)
