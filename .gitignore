from __future__ import annotations
from pathlib import Path
import yaml

def load_registry() -> dict[str, dict]:
    out = {}
    regdir = Path("registry")
    for p in regdir.glob("*.yml"):
        data = yaml.safe_load(p.read_text(encoding="utf-8"))
        out[data["procedure"]] = data
    return out

def load_atlas() -> dict[str, dict]:
    out = {}
    adir = Path("atlas")
    for p in adir.glob("*.atlas.yml"):
        data = yaml.safe_load(p.read_text(encoding="utf-8"))
        out[data["procedure"]] = {c["name"]: c for c in data.get("columns", [])}
    return out

def compose_columns_with_descriptions(registry_entry: dict, atlas_map: dict[str, dict]) -> list[dict]:
    cols = []
    for c in registry_entry["result_columns"]:
        name = c["name"]
        a = atlas_map.get(name, {})
        merged = {
            "name": name,
            "sql_type": c["sql_type"],
            "nullable": c["nullable"],
            "description": a.get("description", ""),
            "tags": a.get("tags", []),
            "format": a.get("format"),
            "pattern": a.get("pattern"),
            "example": a.get("example"),
            "deprecated": a.get("deprecated", False),
            "x-needs-review": a.get("needs_review", False),
        }
        cols.append(merged)
    return cols

