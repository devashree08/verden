#nullable enable
using System.Security.Claims;
using Microsoft.Extensions.Options;
using Maturity.Portal.Authorization;
using Maturity.Portal.Configurations;
using Maturity.Portal.Services;

namespace Maturity.Portal.Middlewares;

/// Builds principal from SSO (Negotiate) and dev headers; stamps portal:policy claims via SP.
/// Username (pzid) primary; EID fallback.
public sealed class SsoIdentityMiddleware(
    RequestDelegate next,
    IOptions<HeaderIdentityOptions> opt,
    IWebHostEnvironment env,
    IPortalPolicyService policyService
)
{
    private readonly RequestDelegate _next = next;
    private readonly HeaderIdentityOptions _h = opt.Value;
    private readonly IWebHostEnvironment _env = env;
    private readonly IPortalPolicyService _pol = policyService;

    public async Task InvokeAsync(HttpContext ctx)
    {
        var principal = ctx.User ?? new ClaimsPrincipal();
        ClaimsIdentity? identity = principal.Identities.FirstOrDefault();

        // Dev-only header fallback
        if (_env.IsDevelopment() && _h.AllowHeaderFallbackInDevelopment)
        {
            var userName = ctx.Request.Headers[_h.HeaderUserName].FirstOrDefault();
            var eid      = ctx.Request.Headers[_h.HeaderEid].FirstOrDefault();
            var email    = ctx.Request.Headers[_h.HeaderEmail].FirstOrDefault();
            var first    = ctx.Request.Headers[_h.HeaderFirst].FirstOrDefault();
            var last     = ctx.Request.Headers[_h.HeaderLast].FirstOrDefault();

            if (!string.IsNullOrWhiteSpace(userName) || !string.IsNullOrWhiteSpace(eid))
            {
                identity ??= new ClaimsIdentity(authenticationType: "DevHeader");
                if (!string.IsNullOrWhiteSpace(userName)) identity.AddClaim(new Claim(PortalClaimTypes.UserName, userName));
                if (!string.IsNullOrWhiteSpace(eid))      identity.AddClaim(new Claim(PortalClaimTypes.EID, eid));
                if (!string.IsNullOrWhiteSpace(email))    identity.AddClaim(new Claim(PortalClaimTypes.Email, email));
                if (!string.IsNullOrWhiteSpace(first))    identity.AddClaim(new Claim(PortalClaimTypes.GivenName, first));
                if (!string.IsNullOrWhiteSpace(last))     identity.AddClaim(new Claim(PortalClaimTypes.Surname, last));
                if (!principal.Identities.Contains(identity)) principal.AddIdentity(identity);
            }
        }

        var userNameClaim = principal.Identity?.Name; // pzid
        var eidClaim      = principal.FindFirst(PortalClaimTypes.EID)?.Value;

        if (!string.IsNullOrWhiteSpace(userNameClaim) || !string.IsNullOrWhiteSpace(eidClaim))
        {
            var policies = await _pol.GetPoliciesAsync(userNameClaim, eidClaim, ctx.RequestAborted);
            if (policies.Count > 0)
            {
                identity ??= new ClaimsIdentity(authenticationType: principal.Identity?.AuthenticationType ?? "PortalSso");
                foreach (var p in policies)
                    identity.AddClaim(new Claim(PortalClaimTypes.Policy, p));
                if (!principal.Identities.Contains(identity)) principal.AddIdentity(identity);
            }
            ctx.User = principal;
        }

        await _next(ctx);
    }
}
