namespace Maturity.Portal.Configurations;

public sealed class HeaderIdentityOptions
{
    // SSO header keys
    public string HeaderUserName { get; init; } = "pzid";
    public string HeaderEid      { get; init; } = "eid";
    public string HeaderEmail    { get; init; } = "email";
    public string HeaderFirst    { get; init; } = "firstName";
    public string HeaderLast     { get; init; } = "lastName";

    // Dev convenience: allow header-only auth when true and env.IsDevelopment()
    public bool AllowHeaderFallbackInDevelopment { get; init; } = true;
}



namespace Maturity.Portal.Configurations;

public sealed class PolicyCacheOptions
{
    public int Minutes { get; init; } = 5;
}



namespace Maturity.Portal.Configurations;

public sealed class SecureHeaderOptions
{
    public bool EnableHsts { get; init; } = true;
    public int  HstsMaxAgeDays { get; init; } = 365;
    public bool IncludeSubdomains { get; init; } = true;
    public bool Preload { get; init; } = true;
}

using System.Data.Common;

namespace Maturity.Portal.Data;

public interface IDbConnectionFactory
{
    Task<DbConnection> OpenAsync(CancellationToken ct = default);
}



using System.Data.Common;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;

namespace Maturity.Portal.Data;

/// Simple factory that opens a fresh SqlConnection from configuration.
/// Set "ConnectionStrings:AppDb" in appsettings / secret store / key vault binding.
public sealed class SqlDbConnectionFactory(IConfiguration config) : IDbConnectionFactory
{
    private readonly string _cs = config.GetConnectionString("AppDb")
        ?? throw new InvalidOperationException("ConnectionStrings:AppDb is not configured.");

    public async Task<DbConnection> OpenAsync(CancellationToken ct = default)
    {
        var conn = new SqlConnection(_cs);
        await conn.OpenAsync(ct);
        return conn;
    }
}


