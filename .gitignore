#nullable enable
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;

namespace Maturity.Portal.Extensions;

public static class SecureHeaderExtensions
{
    /// <summary>
    /// Adds a minimal set of security headers and (optionally) HSTS in non-dev.
    /// Options are taken from DI (IOptions&lt;SecureHeaderOptions&gt;) unless an explicit
    /// instance is passed in.
    /// </summary>
    public static IApplicationBuilder UseSecureHeaders(
        this IApplicationBuilder app,
        IWebHostEnvironment env,
        SecureHeaderOptions? explicitOptions = null)
    {
        // Prefer explicit options; else try DI; else defaults.
        var resolved = explicitOptions
            ?? app.ApplicationServices.GetService<IOptions<SecureHeaderOptions>>()?.Value
            ?? new SecureHeaderOptions();

        app.Use(async (ctx, next) =>
        {
            var h = ctx.Response.Headers;

            if (!h.ContainsKey("X-Content-Type-Options"))             h.Append("X-Content-Type-Options", "nosniff");
            if (!h.ContainsKey("X-Frame-Options"))                    h.Append("X-Frame-Options", "SAMEORIGIN");
            if (!h.ContainsKey("Referrer-Policy"))                    h.Append("Referrer-Policy", "no-referrer");
            if (!h.ContainsKey("X-Permitted-Cross-Domain-Policies"))  h.Append("X-Permitted-Cross-Domain-Policies", "none");
            if (!h.ContainsKey("Permissions-Policy"))                 h.Append("Permissions-Policy", "geolocation=(), microphone=(), camera=()");

            await next();
        });

        if (!env.IsDevelopment() && resolved.EnableHsts)
        {
            app.UseHsts();
        }

        return app;
    }
}
