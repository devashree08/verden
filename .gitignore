"""
Server bootstrap: assemble FastMCP, register auth + middleware, and (later) register tools/resources.

Run locally:
    uv run python -m framework.core.bootstrap
Then connect MCP Inspector to http://localhost:8080/mcp/
"""

from __future__ import annotations
import logging

from fastmcp import FastMCP
from fastmcp.server.transport import Transport  # enum-like strings for run()

from .config import SERVICE_NAME, HOST, PORT, HTTP_PATH
from .logging import setup_logging
from ..auth.oidc import build_jwt_verifier, EmailClaimMiddleware


def create_server() -> FastMCP:
    setup_logging()
    log = logging.getLogger(__name__)

    # 1) Construct server with JWT auth
    auth_provider = build_jwt_verifier()
    mcp = FastMCP(name=SERVICE_NAME, auth=auth_provider)

    # 2) Add our small policy middleware (email claim -> context state)
    mcp.add_middleware(EmailClaimMiddleware())

    # 3) (Later) import tools/resources so decorators register them on this server.
    #    Keep imports inside function to avoid side-effects during tooling (ruff, pytest).
    try:
        # Example: from server.tools import sample_echo_tool  # noqa: F401
        # For now we donâ€™t import your SQL tools until Step 4.
        pass
    except Exception as exc:  # pragma: no cover
        log.exception("Tool registration failed: %s", exc)
        raise

    return mcp


def main() -> None:
    mcp = create_server()
    # HTTP transport with a single endpoint path (default `/mcp/`)
    # Clients discover/list/call tools over this one path.
    mcp.run(
        transport=Transport.HTTP,   # same as transport="http"
        host=HOST,
        port=PORT,
        path=HTTP_PATH,
    )


if __name__ == "__main__":
    main()

