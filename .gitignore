# ADR-000: Identity handling and EID flow
**Status:** Accepted  
**Context Date:** 2025-09-11

## Context
- The conversational agent must never learn end-user identity attributes (e.g., EID).
- Stored procedures require `@EID` and optionally `@VAST`.
- MVP runs without an external gateway; future state adds Kong/OPA/JIT.

## Decision
- **EID is injected server-side** by the MCP server from a trusted source:
  - Dev/test: header `X-User-EID` from the frontend/application tier.
  - Future: OIDC @ gateway → JIT token; MCP server derives EID from validated claims.
- **MCP tool schemas will not include EID**; tools accept only business inputs (e.g., `vast`, `question`, time hints).
- **Authorization checks are performed pre-DB** in the MCP server:
  - Verify `EID ↔ VAST` access before executing any proc (defense in depth with proc-side checks).
- **Audit logging** records a stable, non-reversible subject identifier (e.g., SHA-256(EID|salt)).

## Consequences
- Eliminates identity leakage risk into prompts or LLM memory.
- Keeps agent/tool contracts stable across environments.
- Requires a consistent place to source/validate EID (header now, JWT later).

## Alternatives considered
- Passing EID via tool inputs (rejected—privacy risk).
- Deriving identity inside the agent (rejected—breaks ZT and audit).




# ADR-001: Stored-procedure-only data access
**Status:** Accepted

## Decision
- Only SQL Server **stored procedures** are callable.
- **No dynamic SQL** or ad-hoc queries from the app or agent.
- Each proc is registered in a **Procedure Registry** with name, schema, type (read/write), param schema, result metadata, timeouts, and per-proc concurrency caps.

## Rationale
- Smaller, auditable surface; DBAs retain control.
- Clear contracts for the MCP tools and agent.
- Enables targeted rate limiting and idempotency rules.

## Notes
- For the MVP, all three initial procs are **read-only** and require `@EID`, optional `@VAST`.



# ADR-003: Observability & Audit envelope
**Status:** Accepted

## Decision
- All requests carry/propagate a `request_id` (generate if missing).
- Emit **structured JSON logs** and **OpenTelemetry** traces (exporter choice per environment).
- Every tool call writes an **audit record** with:
  - `timestamp`, `request_id`, `subject_id` (SHA-256(EID|pepper)), `tool`, `procedure`,
  - `vast`, `selected_columns` (names only), `row_count`, `duration_ms`,
  - `policy_decision_id` (if applicable), `outcome` (OK/ERROR + code),
  - **No row values**, no secrets, no stack traces.

## Error envelope (client-facing)
```json
{
  "error": {
    "code": "PROC_TIMEOUT|UNAUTHORIZED|INVALID_INPUT|RATE_LIMITED|INTERNAL",
    "message": "Human-readable, non-sensitive message",
    "details": { "hint": "optional", "fields": ["optional"] },
    "request_id": "<uuid>"
  }
}





# Contracts (Phase 0)

## Headers (dev/test)
- `X-Request-ID` (optional; server generates if absent)
- `X-User-EID` (dev-only; trusted by server; NOT forwarded to LLM)

## MCP Tools (names fixed; schemas come in Phase 2)
- `describe_fields(proc, search?, tags?, page?)`
- `get_all_apps_value(vast?, question?, time_window?)`
- `get_all_apps_summary(vast?, question?, month?)`
- `get_vast_general(vast?, question?)`

### Principles
- **No EID** in any tool input/output schema.
- Inputs are business-centric; server performs identity enforcement and column projection.
- Maximum returned columns per call: **cap configured** (default to be set in Phase 2).

## Authorization (concept)
- Pre-DB check: verify `EID ↔ VAST` access.
- Deny by default if VAST is absent and question implies multi-tenant data not permitted.
- Column allow/deny lists enforced server-side (not visible to agent).

## Error envelope
- See ADR-003 for canonical JSON.

## Audit record (fields)
- `timestamp`, `request_id`, `subject_id`, `tool`, `procedure`,
- `vast`, `selected_columns`, `row_count`, `duration_ms`,
- `policy_decision_id?`, `outcome`.


# Configuration keys (12-factor)

## Server
- `APP_ENV` = local|dev|staging|prod
- `APP_PORT` (default 8080)
- `LOG_LEVEL` = info|debug|warn|error
- `REQUEST_ID_HEADER` (default `X-Request-ID`)
- `DEV_EID_HEADER` (default `X-User-EID`)
- `MAX_COLUMNS_PER_CALL` (default 30)
- `RESULT_ROW_LIMIT_DEFAULT` (default 100)
- `RESULT_ROW_LIMIT_MAX` (default 1000)
- `RATE_LIMIT_PER_MINUTE` (default 60)

## Database (SQL Server)
- `DB_SERVER`
- `DB_DATABASE`
- `DB_USERNAME`
- `DB_PASSWORD` (use sops/secret store)
- `DB_ENCRYPT` (true/false)
- `DB_TRUST_SERVER_CERT` (true/false)
- `DB_CONN_TIMEOUT_SEC` (default 5)
- `DB_COMMAND_TIMEOUT_SEC` (default 30)
- `DB_MAX_CONNECTIONS` (default 10)
- `DB_MAX_WORKERS` (default 10)

## Procedure-level overrides (via registry YAML)
- `timeout_ms`
- `max_concurrency`
- `type` = read|write
- `idempotent` (bool; reads only for now)

## Security (later phases; placeholders now)
- `JWT_ISSUER`
- `JWT_AUDIENCE`
- `JWKS_URL`
- `OPA_URL` (future)
- `VAULT_ADDR` / `GOOGLE_PROJECT_ID` (future)



# Security Baseline (Phase 0)

## Zero-Trust tenets we will enforce in later phases
- Identity at every hop; least privilege; continuous authorization (NIST 800-207).
- JIT, short-lived tokens at the gateway; mTLS service-to-service.
- Externalized policy (OPA) for tool and data access; decision logs.

## Phase 0 / Dev safeguards (effective immediately)
- EID is server-injected; **never** in LLM/tool schemas or prompts.
- Stored-proc-only access; no ad-hoc SQL.
- Projection gate: cap columns, allow/deny lists (enforced in server).
- Structured logging + audit envelope; no row values or secrets in logs.
- Clear separation of acceptable dev TLS settings vs. non-dev requirements (ADR-004).
- Rate limiting and per-proc concurrency caps will be implemented before wider testing.

## Things explicitly out of scope in Phase 0
- Public endpoints
- External gateway, OPA, Vault (documented, not implemented)
- Health endpoints




procedure: dbo.SPGetAllAppsValueByEID
version: 1
type: read
timeouts:
  request_ms: 30000
limits:
  max_concurrency: 5
params:
  - name: EID
    sql_type: nvarchar(64)
    required: true
    server_supplied: true
  - name: VAST
    sql_type: nvarchar(64)
    required: false
columns:
  - name: vast_id
    sql_type: nvarchar(64)
    nullable: false
    description: ""
    tags: [identifier]
    expose_to_llm: true
    mask_in_logs: false
  # ... 300–500 items seeded by introspection





