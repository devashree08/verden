"""
Sample reference TOOL for developers.

- Shows @mcp.tool usage
- Reads caller email from request context (set by EmailClaimMiddleware)
- Uses our standard output shape: { "rows": [ ... ] }
"""

from __future__ import annotations
from typing import Any, Dict, List, Optional, Union

from fastmcp import mcp, Context
from framework.schemas.outputs import ROWS_OUTPUT


@mcp.tool(
    name="sample_echo",
    description=(
        "Echo back normalized inputs for debugging/demo. "
        "Demonstrates context access (caller email) and the standard {rows:[...]} output."
    ),
    output_schema=ROWS_OUTPUT,  # advertise our unified output shape
)
async def sample_echo(
    ctx: Context,
    vast: Optional[Union[str, List[Union[int, str]]]] = None,
    limit: int = 1000,
    offset: int = 0,
) -> Dict[str, List[Dict[str, Any]]]:
    """
    Args:
        ctx: FastMCP request context (provides access token, state, headers).
        vast: Optional VAST IDs (CSV string or array). We don't normalize hereâ€”just echo.
        limit: Row limit (ignored in this sample).
        offset: Row offset (ignored in this sample).

    Returns:
        { "rows": [ { "email": <caller>, "vast": <as-passed>, "limit": X, "offset": Y } ] }
    """
    # Caller identity provided by our EmailClaimMiddleware (Step 3).
    email = (ctx.get_state("email") or "").lower()

    return {
        "rows": [
            {
                "email": email,
                "vast": vast,
                "limit": limit,
                "offset": offset,
                "note": "This is a reference tool; copy the pattern for real tools.",
            }
        ]
    }
