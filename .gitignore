def _is_numeric_like(val) -> bool:
    if val is None or (isinstance(val, float) and pd.isna(val)):
        return False
    if isinstance(val, (int, float, Decimal)):
        return True
    if isinstance(val, str):
        v = val.strip()
        if v == "":
            return False
        try:
            Decimal(v)
            return True
        except InvalidOperation:
            return False
    return False

def _series_all_numeric_like(s: pd.Series) -> bool:
    # sample up to 500 non-null values to keep it fast
    sample = (x for x in s.dropna().values[:500])
    return all(_is_numeric_like(v) for v in sample)

def _coerce_series_to_decimal(s: pd.Series) -> pd.Series:
    def conv(v):
        if v is None or (isinstance(v, float) and pd.isna(v)):
            return None
        if isinstance(v, Decimal):
            return v
        if isinstance(v, (int, float)):
            return Decimal(str(v))
        if isinstance(v, str):
            v2 = v.strip()
            if v2 == "":
                return None
            return Decimal(v2)
        # anything else -> try string route or mark as None
        try:
            return Decimal(str(v))
        except Exception:
            return None
    return s.apply(conv)

