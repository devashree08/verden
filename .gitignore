"""
Input normalizers for tools.

- normalize_vast_csv(vast):
    Accepts CSV string ("101, 202") or list/tuple ([101, "202"]).
    Returns a clean CSV: "101,202", or None if empty. Never injects spaces.

- normalize_report_month_literal(report_month):
    Accepts "YYYY-MM", "Month YYYY" (e.g., "Feb 2025"), or the full literal
    "YYYY-MM-01 00:00:00". Returns the **string literal** "YYYY-MM-01 00:00:00".

    IMPORTANT (EST rule): We DO NOT apply timezone math. The DB stores a
    naive literal (no timezone) that is **conceptually EST** at midnight.
    This function only formats to that literal; it never converts between
    timezones. If parsing fails, returns None so the tool can omit the
    parameter (allowing the proc to use the latest month).
"""
from __future__ import annotations
from typing import Iterable, Optional, Union

# ... leave your imports and implementations as-is ...

# Update per-argument descriptions (for Pydantic field help in tools):
# - In get_all_apps_* tools, ensure Field(description=...) matches:
#
# vast:
#   "VAST filter. Accepts CSV (e.g., '101,202') or a list like [101, '202'].
#    Omit for all caller-permitted VASTs."
#
# report_month:
#   "Month to query. Accepts 'YYYY-MM', 'Month YYYY', or the exact literal
#    'YYYY-MM-01 00:00:00'. If omitted, the proc returns the latest month.
#    Note: stored as a naive literal that represents EST midnight; no timezone math."
