import * as React from "react";
import { useState, useMemo, useRef } from "react";
import {
  CssBaseline,
  Container,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  ButtonGroup,
  Box,
  Chip,
  TextField,
  Switch,
  FormControlLabel,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Tabs,
  Tab,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Drawer,
  List,
  ListItemButton,
  ListItemText,
  Stack,
  Snackbar,
  Alert,
  useTheme,
  useMediaQuery
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import SaveIcon from "@mui/icons-material/Save";
import VisibilityIcon from "@mui/icons-material/Visibility";
import PictureAsPdfIcon from "@mui/icons-material/PictureAsPdf";
import DescriptionIcon from "@mui/icons-material/Description";

// Dummy test data
const fakeDB = { orgs: ["VCS", "TPD", "NETWORK"], subcategories: ["GV.RR-01", "DE.AE-02"] };

function MultiSelect({ label, options, selected, onChange }) {
  return (
    <FormControl fullWidth size="small">
      <InputLabel id={`${label}-label`}>{label}</InputLabel>
      <Select
        labelId={`${label}-label`}
        multiple
        value={selected}
        onChange={(e) => onChange(e.target.value)}
        renderValue={(sel) => (
          <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
            {sel.map((v) => (
              <Chip key={v} label={v} size="small" />
            ))}
          </Box>
        )}
      >
        {options.map((opt) => (
          <MenuItem key={opt} value={opt}>{opt}</MenuItem>
        ))}
      </Select>
    </FormControl>
  );
}

export default function App() {
  const theme = useTheme();
  const downSm = useMediaQuery(theme.breakpoints.down("sm"));
  const [org, setOrg] = useState("VCS");
  const [subcats, setSubcats] = useState(["GV.RR-01"]);
  const [execSum, setExecSum] = useState("");
  const [scope, setScope] = useState("");
  const [quant, setQuant] = useState(false);
  const [coverage, setCoverage] = useState("");
  const [tab, setTab] = useState("L3");

  const narrative = useMemo(() => `Narrative for ${org}`, [org]);

  return (
    <React.Fragment>
      <CssBaseline />
      <Container maxWidth={false} disableGutters>
        <Box sx={{ maxWidth: 1400, mx: "auto", px: { xs: 1, sm: 2, md: 3 }, py: 2 }}>
          <Typography variant="h5" gutterBottom>CSF 2.0 Narrative Generator</Typography>

          <Grid container spacing={2} alignItems="flex-start">
            {/* Left column */}
            <Grid item xs={12} md={4} lg={3}>
              <Card>
                <CardContent>
                  <Stack spacing={2}>
                    <Box>
                      {downSm ? (
                        <FormControl fullWidth size="small">
                          <InputLabel id="org-label">Organization</InputLabel>
                          <Select labelId="org-label" value={org} onChange={(e) => setOrg(e.target.value)}>
                            {fakeDB.orgs.map((o) => <MenuItem key={o} value={o}>{o}</MenuItem>)}
                          </Select>
                        </FormControl>
                      ) : (
                        <ButtonGroup fullWidth>
                          {fakeDB.orgs.map((o) => (
                            <Button key={o} variant={org === o ? "contained" : "outlined"} onClick={() => setOrg(o)}>
                              {o}
                            </Button>
                          ))}
                        </ButtonGroup>
                      )}
                    </Box>

                    <MultiSelect label="Subcategories" options={fakeDB.subcategories} selected={subcats} onChange={setSubcats} />
                    <TextField label="Executive Summary" value={execSum} onChange={(e) => setExecSum(e.target.value)} multiline minRows={3} fullWidth />
                    <TextField label="Scope" value={scope} onChange={(e) => setScope(e.target.value)} multiline minRows={2} fullWidth />

                    <FormControlLabel control={<Switch checked={quant} onChange={(e) => setQuant(e.target.checked)} />} label={quant ? "Quantitative" : "Qualitative"} />
                    <TextField label="Coverage/Profile" value={coverage} onChange={(e) => setCoverage(e.target.value)} fullWidth />
                  </Stack>
                </CardContent>
              </Card>
            </Grid>

            {/* Right column */}
            <Grid item xs={12} md={8} lg={9}>
              <Card>
                <CardContent>
                  <Tabs value={tab} onChange={(_, v) => setTab(v)} variant="scrollable">
                    <Tab label="Level 3" value="L3" />
                    <Tab label="Level 4" value="L4" />
                  </Tabs>
                  <Divider sx={{ my: 1 }} />
                  <Typography variant="body1">Showing attributes and artifacts for: {subcats.join(", ")}</Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        </Box>
      </Container>
    </React.Fragment>
  );
}
