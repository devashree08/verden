"""
Tool: get_vast_general_by_user

Purpose
-------
Compliance / general metadata per VAST for the caller (includes decommissioned VASTs).
No report_month parameter (non-snapshot table).

Inputs
------
- vast (optional), limit, offset

Output
------
{ "rows": [ ... ] }
"""

from __future__ import annotations
from typing import Dict, Any

from pydantic import BaseModel, Field
from fastmcp import Context

from framework.core.registry import mcp
from framework.core.config import DB_BACKEND
from framework.schemas.inputs import normalize_vast_csv
from framework.schemas.outputs import rows_schema
from framework.adapters import mssql as mssql_adapter
from framework.adapters import bigquery as bq_adapter  # fallback only


class GeneralParams(BaseModel):
    vast: str | list[str | int] | None = Field(
        default=None,
        description="VAST filter (CSV or list). Omit to include all caller-permitted VASTs (including decommissioned).",
    )
    limit: int = Field(default=1000, ge=1, le=15000)
    offset: int = Field(default=0, ge=0)


@mcp.tool(
    name="get_vast_general_by_user",
    description=(
        "Compliance/general metadata per VAST for the authenticated user. "
        "Includes decommissioned VASTs. No report_month filter."
    ),
    output_schema=rows_schema,
)
async def get_vast_general_by_user(params: GeneralParams, ctx: Context) -> Dict[str, Any]:
    email: str = ctx.state.get("email")
    if not email:
        return {"rows": []}

    vast_csv = normalize_vast_csv(params.vast)

    if DB_BACKEND == "mssql":
        rows = mssql_adapter.run_vast_general_by_user(
            email=email,
            vast_csv=vast_csv,
            limit=params.limit,
            offset=params.offset,
        )
        return {"rows": rows}

    rows = bq_adapter.run_vast_general_by_user(
        email=email,
        vast_csv=vast_csv,
        limit=params.limit,
        offset=params.offset,
    )
    return {"rows": rows}
