"""
Tool: get_vast_general_by_user

Purpose
-------
Compliance / general metadata per VAST for the caller (includes decommissioned VASTs).
No report_month parameter (non-snapshot table).

Inputs
------
- vast (optional), limit, offset

Output
------
{ "rows": [ ... ] }
"""

from __future__ import annotations
from typing import Any, Dict, Iterable, Union

from pydantic import BaseModel, Field
from fastmcp import Context

from framework.core.registry import mcp
from framework.core.config import DB_BACKEND
from framework.schemas.outputs import rows_schema
from framework.adapters import mssql as mssql_adapter
from framework.adapters import bigquery as bq_adapter  # fallback only


# ---- Local normalizers (keep tools self-contained & consistent) ----
def _to_csv(vast: Union[str, Iterable[Union[str, int]], None]) -> str | None:
    """
    Accepts CSV string ("101, 202") or iterable ([101, "202"]).
    Returns a clean CSV string "101,202", or None if empty/invalid.
    """
    if vast is None:
        return None
    if isinstance(vast, str):
        s = vast.strip()
        return s if s else None
    try:
        tokens: list[str] = []
        for v in vast:
            if v is None:
                continue
            t = str(v).strip()
            if t:
                tokens.append(t)
        return ",".join(tokens) or None
    except TypeError:
        t = str(vast).strip()
        return t or None


# ---- Params schema ----
class GeneralParams(BaseModel):
    vast: str | list[str | int] | None = Field(
        default=None,
        description=(
            "VAST filter. Accepts CSV string (e.g., '101,202') or a list like [101,'202'].\n"
            "Omit to include all caller-permitted VASTs (includes decommissioned)."
        ),
    )
    limit: int = Field(default=1000, ge=1, le=15000, description="Max rows to return (1â€“15000). Default 1000.")
    offset: int = Field(default=0, ge=0, description="Rows to skip before returning results. Default 0.")


@mcp.tool(
    name="get_vast_general_by_user",
    description=(
        "Compliance/general metadata per VAST for the authenticated user. "
        "Includes decommissioned VASTs. No report_month filter."
    ),
    output_schema=rows_schema,
)
async def get_vast_general_by_user(params: GeneralParams, ctx: Context) -> Dict[str, Any]:
    email: str = ctx.state.get("email")
    if not email:
        # Auth middleware should have set this; return empty for safety.
        return {"rows": []}

    vast_csv = _to_csv(params.vast)

    if DB_BACKEND == "mssql":
        rows = mssql_adapter.run_vast_general_by_user(
            email=email,
            vast_csv=vast_csv,
            limit=params.limit,
            offset=params.offset,
        )
        return {"rows": rows}

    # Fallback: BigQuery
    rows = bq_adapter.run_vast_general_by_user(
        email=email,
        vast_csv=vast_csv,
        limit=params.limit,
        offset=params.offset,
    )
    return {"rows": rows}
