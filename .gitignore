from __future__ import annotations
from typing import Any, Dict, List, Optional, Union

from fastmcp import Context
from framework.core.registry import mcp
from framework.schemas.outputs import ROWS_OUTPUT

@mcp.tool(
    name="sample_echo",
    description="Echo normalized inputs and caller identity for debugging.",
    output_schema=ROWS_OUTPUT,
)
async def sample_echo(
    vast: Optional[Union[str, List[Union[int, str]]]] = None,
    limit: int = 1000,
    offset: int = 0,
    ctx: Context = Context.depends(),   # ← dependency-injected context (current pattern)
) -> Dict[str, List[Dict[str, Any]]]:
    email = (ctx.get_state("email") or "").lower()
    return {
        "rows": [
            {
                "email": email,
                "vast": vast,
                "limit": limit,
                "offset": offset,
                "note": "Reference tool; copy this pattern for real tools.",
            }
        ]
    }
