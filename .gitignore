// feature-local API wrapper for artifacts
import api from '../../../lib/axiosClient';

export async function linkArtifact(payload) {
  // payload: {orgID, csf2SubcategoryID, maturityLevel, csf1SubcategoryID?, attributeNum?, customAttributeNum?, url, title?}
  const { data } = await api.post('/api/attribute-artifacts/mutate', {
    action: 'Link',
    ...payload,
  });
  return data; // the linked row
}

export async function unlinkArtifact(payload) {
  // payload: either { artifactLinkID } OR composite + url
  const { data } = await api.post('/api/attribute-artifacts/mutate', {
    action: 'Unlink',
    ...payload,
  });
  return data; // { affected: n }
}

export async function listAttributeArtifacts({
  orgID, csf2SubcategoryID, maturityLevel,
  csf1SubcategoryID, attributeNum, customAttributeNum
}) {
  const params = {
    mode: 'Attribute',
    orgID, csf2SubcategoryID, maturityLevel, csf1SubcategoryID, attributeNum, customAttributeNum,
  };
  const { data } = await api.get('/api/attribute-artifacts/list', { params });
  return data; // [{ artifactLinkID, url, title, ... }]
}

export async function listReusePool({ orgID, csf2SubcategoryID, q }) {
  const params = { mode: 'ReusePool', orgID, csf2SubcategoryID, q: q || null };
  const { data } = await api.get('/api/attribute-artifacts/list', { params });
  return data; // [{ url, title, lastUsedAt, uses }]
}





import * as React from 'react';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Tabs, Tab, Box, Stack, Button, TextField, IconButton, Chip, Typography,
  List, ListItem, ListItemText, Tooltip
} from '@mui/material';
import LinkIcon from '@mui/icons-material/Link';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';
import useToast from '../../../../ui/feedback/useToast';
import {
  listAttributeArtifacts, listReusePool, linkArtifact, unlinkArtifact
} from '../../api/artifactsApi';

// Simple https guard (client-side)
const isSecureUrl = (s) => /^https:\/\/.+/i.test(String(s || '').trim());

/**
 * Props:
 *  open, onClose
 *  identity: {
 *    orgID, csf2SubcategoryID, maturityLevel,
 *    csf1SubcategoryID, attributeNum, customAttributeNum,
 *    disabled: boolean,                  // when baseline status === 'Remove'
 *    displayLabel: string                // e.g., "ML3 • ID.AM-1 #2" or "ML4 • Custom #1"
 *  }
 */
export default function ArtifactLinksModal({ open, onClose, identity }) {
  const { success, error, info } = useToast();
  const [tab, setTab] = React.useState(0); // 0 = Current, 1 = Add, 2 = Reuse
  const [loading, setLoading] = React.useState(false);

  // current links
  const [items, setItems] = React.useState([]);
  const reloadCurrent = React.useCallback(async () => {
    if (!identity) return;
    setLoading(true);
    try {
      const data = await listAttributeArtifacts(identity);
      setItems(data || []);
    } catch {
      error('Failed to load links');
    } finally {
      setLoading(false);
    }
  }, [identity, error]);

  React.useEffect(() => {
    if (open) {
      setTab(0);
      reloadCurrent();
    }
  }, [open, reloadCurrent]);

  // Add form
  const [url, setUrl] = React.useState('');
  const [title, setTitle] = React.useState('');
  const addDisabled = !isSecureUrl(url) || identity?.disabled;

  const handleAdd = async () => {
    if (!isSecureUrl(url)) { info('Use a secure https:// link.'); return; }
    setLoading(true);
    try {
      await linkArtifact({ ...identity, url: url.trim(), title: title.trim() || null });
      success('Link added');
      setUrl(''); setTitle('');
      setTab(0);
      reloadCurrent();
    } catch {
      error('Failed to add link');
    } finally {
      setLoading(false);
    }
  };

  // Reuse pool
  const [q, setQ] = React.useState('');
  const [pool, setPool] = React.useState([]);
  const loadPool = React.useCallback(async () => {
    if (!identity) return;
    setLoading(true);
    try {
      const data = await listReusePool({ orgID: identity.orgID, csf2SubcategoryID: identity.csf2SubcategoryID, q });
      setPool(data || []);
    } catch {
      error('Failed to load reuse links');
    } finally {
      setLoading(false);
    }
  }, [identity, q, error]);

  React.useEffect(() => {
    if (open && tab === 2) loadPool();
  }, [open, tab, loadPool]);

  const handleReuse = async (u) => {
    if (!isSecureUrl(u)) { info('Use a secure https:// link.'); return; }
    setLoading(true);
    try {
      await linkArtifact({ ...identity, url: u, title: null });
      success('Link added from pool');
      setTab(0);
      reloadCurrent();
    } catch {
      error('Failed to reuse link');
    } finally {
      setLoading(false);
    }
  };

  const handleUnlink = async (artifactLinkID, url) => {
    setLoading(true);
    try {
      await unlinkArtifact({ artifactLinkID, url }); // sproc supports either
      success('Link removed');
      setItems((prev) => prev.filter(x => x.artifactLinkID !== artifactLinkID));
    } catch {
      error('Failed to remove link');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={!!open} onClose={loading ? undefined : onClose} fullWidth maxWidth="md">
      <DialogTitle>
        Attribute Artifacts
        <Typography variant="caption" display="block" color="text.secondary">
          {identity?.displayLabel || ''}
        </Typography>
      </DialogTitle>

      <DialogContent dividers>
        <Tabs value={tab} onChange={(_, v) => setTab(v)} sx={{ mb: 2 }}>
          <Tab label="Current" />
          <Tab label="Add new" disabled={identity?.disabled} />
          <Tab label="Reuse existing" disabled={identity?.disabled} />
        </Tabs>

        {tab === 0 && (
          <Box>
            {items.length === 0 ? (
              <Typography variant="body2" color="text.secondary">No artifacts yet.</Typography>
            ) : (
              <List dense>
                {items.map((it) => (
                  <ListItem
                    key={it.artifactLinkID}
                    secondaryAction={
                      <Stack direction="row" spacing={0.5}>
                        <Tooltip title="Open">
                          <IconButton size="small" component="a" href={it.url} target="_blank" rel="noopener noreferrer">
                            <OpenInNewIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        {!identity?.disabled && (
                          <Tooltip title="Unlink">
                            <IconButton size="small" onClick={() => handleUnlink(it.artifactLinkID, it.url)}>
                              <DeleteOutlineOutlinedIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        )}
                      </Stack>
                    }
                  >
                    <ListItemText
                      primary={
                        <Stack direction="row" spacing={1} alignItems="center" useFlexGap flexWrap="wrap">
                          <LinkIcon fontSize="small" />
                          <Typography variant="body2" sx={{ fontWeight: 700 }}>
                            {it.title || it.url}
                          </Typography>
                          {it.title && (
                            <Chip size="small" variant="outlined" label={it.url} />
                          )}
                        </Stack>
                      }
                      secondary={
                        <Typography variant="caption" color="text.secondary">
                          Added {new Date(it.createdAt).toLocaleString()}
                          {it.updatedAt ? ` • Updated ${new Date(it.updatedAt).toLocaleString()}` : ''}
                        </Typography>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Box>
        )}

        {tab === 1 && (
          <Stack spacing={2}>
            <TextField
              label="Artifact URL (https://…)"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              fullWidth
              error={!!url && !isSecureUrl(url)}
              helperText={!!url && !isSecureUrl(url) ? 'Must start with https://' : ' '}
            />
            <TextField
              label="Optional title (shown instead of the URL)"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              fullWidth
            />
          </Stack>
        )}

        {tab === 2 && (
          <Box>
            <Stack direction="row" spacing={1} sx={{ mb: 1 }}>
              <TextField
                label="Search existing"
                value={q}
                onChange={(e) => setQ(e.target.value)}
                fullWidth
              />
              <Button onClick={loadPool}>Search</Button>
            </Stack>
            {pool.length === 0 ? (
              <Typography variant="body2" color="text.secondary">No matches.</Typography>
            ) : (
              <List dense>
                {pool.map((p) => (
                  <ListItem
                    key={`${p.url}`}
                    secondaryAction={
                      <Stack direction="row" spacing={0.5}>
                        <Tooltip title="Open">
                          <IconButton size="small" component="a" href={p.url} target="_blank" rel="noopener noreferrer">
                            <OpenInNewIcon fontSize="small" />
                          </IconButton>
                        </Tooltip>
                        <Button size="small" variant="contained" onClick={() => handleReuse(p.url)}>
                          Add
                        </Button>
                      </Stack>
                    }
                  >
                    <ListItemText
                      primary={
                        <Stack direction="row" spacing={1} alignItems="center" useFlexGap flexWrap="wrap">
                          <LinkIcon fontSize="small" />
                          <Typography variant="body2" sx={{ fontWeight: 700 }}>
                            {p.title || p.url}
                          </Typography>
                          {p.title && <Chip size="small" variant="outlined" label={p.url} />}
                        </Stack>
                      }
                      secondary={
                        <Typography variant="caption" color="text.secondary">
                          Last used {new Date(p.lastUsedAt).toLocaleString()} • {p.uses} use{p.uses === 1 ? '' : 's'}
                        </Typography>
                      }
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Box>
        )}
      </DialogContent>

      <DialogActions>
        {tab === 1 && (
          <Button variant="contained" onClick={handleAdd} disabled={loading || addDisabled}>
            Add link
          </Button>
        )}
        <Button onClick={onClose} disabled={loading}>Close</Button>
      </DialogActions>
    </Dialog>
  );
}





import AttachFileIcon from '@mui/icons-material/AttachFile';
import ArtifactLinksModal from '../molecules/ArtifactLinksModal';


const [artModal, setArtModal] = useState({ open: false, identity: null });

// helper to build the identity the modal needs
const buildIdentity = (r) => {
  const isCustom = r.isCustom || !!r.customAttributeDefinition || r.customAttributeNum != null;
  const displayLabel = isCustom
    ? `ML${r.maturityLevel} • Custom #${r.customAttributeNum ?? '—'}`
    : `ML${r.maturityLevel} • ${r.csF1SubcategoryName || 'NIST 1.1'} #${r.attributeNum ?? '—'}`;

  return {
    orgID: r.orgID,
    csf2SubcategoryID: r.csF2SubcategoryID,
    maturityLevel: r.maturityLevel,
    csf1SubcategoryID: isCustom ? null : r.csF1SubcategoryID ?? null,
    attributeNum:     isCustom ? null : r.attributeNum ?? null,
    customAttributeNum: isCustom ? (r.customAttributeNum ?? null) : null,
    disabled: !isCustom && (r.selectionStatus || '') === 'Remove',
    displayLabel
  };
};

const openArtifacts = (row) => setArtModal({ open: true, identity: buildIdentity(row) });
const closeArtifacts = () => setArtModal({ open: false, identity: null });




{/* Actions */}
<TableCell align="center">
  {/* Artifacts button appears for both baseline and custom */}
  <Tooltip title={isCustom ? 'Artifacts (custom)' : (row.selectionStatus === 'Remove' ? 'Artifacts disabled for removed baseline' : 'Artifacts')}>
    <span>
      <IconButton
        size="small"
        onClick={() => onOpenArtifacts?.(row)}   // <— we’ll pass this handler down
        disabled={!isCustom && row.selectionStatus === 'Remove'}
      >
        <AttachFileIcon fontSize="small" />
      </IconButton>
    </span>
  </Tooltip>

  {/* existing action UI continues... */}
  {isCustom ? (
    edit ? (
      <>
        {/* existing Save/Cancel for custom */}
      </>
    ) : (
      <>
        {/* existing Edit/Delete for custom */}
      </>
    )
  ) : state === 'saving' ? (
    <CircularProgress size={20} />
  ) : state === 'success' ? (
    <Tooltip title="Saved"><CheckCircleRoundedIcon color="success" /></Tooltip>
  ) : state === 'error' ? (
    <Tooltip title="Save failed"><CancelRoundedIcon color="error" /></Tooltip>
  ) : null}
</TableCell>





<Row
  key={rowKey(r)}
  index={i + 1}
  row={r}
  state={actionState.get(rowKey(r))}
  onSaveBaseline={handleSaveBaseline}
  onPatchRow={optimisticPatch}
  onDeleteRow={onDeleteRow}
  patchLocal={patchLocal}
  onOpenArtifacts={(row) => setArtModal({ open: true, identity: buildIdentity(row) })}
/>






function Row({ index, row, state, onSaveBaseline, onPatchRow, onDeleteRow, patchLocal, onOpenArtifacts }) { … }




<ArtifactLinksModal
  open={artModal.open}
  onClose={closeArtifacts}
  identity={artModal.identity}
/>






